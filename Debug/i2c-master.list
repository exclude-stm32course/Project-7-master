
i2c-master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fa4  08003fa4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fac  08003fac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fac  08003fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003fc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003fc0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d392  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c6e  00000000  00000000  0002d3ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c60  00000000  00000000  0002f040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b68  00000000  00000000  0002fca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019103  00000000  00000000  00030808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d3c  00000000  00000000  0004990b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d44a  00000000  00000000  00053647  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0a91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003278  00000000  00000000  000f0b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003f44 	.word	0x08003f44

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003f44 	.word	0x08003f44

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 faca 	bl	8000a6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f833 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f90f 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f8dd 	bl	800069c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004e2:	f000 f89b 	bl	800061c <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t counter = 0;
 80004e6:	2300      	movs	r3, #0
 80004e8:	713b      	strb	r3, [r7, #4]
  int slave_addr = 4;
 80004ea:	2304      	movs	r3, #4
 80004ec:	60fb      	str	r3, [r7, #12]
  uint32_t Timeout = 1000;
 80004ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f2:	60bb      	str	r3, [r7, #8]
  uint8_t pData = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	70fb      	strb	r3, [r7, #3]
  uint16_t Size = 1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;
  while (1)
  {
	  status = HAL_I2C_Master_Transmit(&hi2c1, slave_addr, &counter, Size, Timeout);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	b299      	uxth	r1, r3
 8000500:	88f8      	ldrh	r0, [r7, #6]
 8000502:	1d3a      	adds	r2, r7, #4
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	4603      	mov	r3, r0
 800050a:	480c      	ldr	r0, [pc, #48]	; (800053c <main+0x70>)
 800050c:	f000 febe 	bl	800128c <HAL_I2C_Master_Transmit>
 8000510:	4603      	mov	r3, r0
 8000512:	717b      	strb	r3, [r7, #5]
	  status = HAL_I2C_Master_Receive(&hi2c1, slave_addr, &pData, Size, Timeout);
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	b299      	uxth	r1, r3
 8000518:	88f8      	ldrh	r0, [r7, #6]
 800051a:	1cfa      	adds	r2, r7, #3
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	4603      	mov	r3, r0
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x70>)
 8000524:	f000 ffa6 	bl	8001474 <HAL_I2C_Master_Receive>
 8000528:	4603      	mov	r3, r0
 800052a:	717b      	strb	r3, [r7, #5]
	  counter = pData + 1;
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	3301      	adds	r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	713b      	strb	r3, [r7, #4]
	  HAL_Delay(10);
 8000534:	200a      	movs	r0, #10
 8000536:	f000 fb0d 	bl	8000b54 <HAL_Delay>
	  status = HAL_I2C_Master_Transmit(&hi2c1, slave_addr, &counter, Size, Timeout);
 800053a:	e7df      	b.n	80004fc <main+0x30>
 800053c:	20000028 	.word	0x20000028

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0a4      	sub	sp, #144	; 0x90
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800054a:	2244      	movs	r2, #68	; 0x44
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fcf0 	bl	8003f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2234      	movs	r2, #52	; 0x34
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fce2 	bl	8003f34 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000570:	f002 f862 	bl	8002638 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <SystemClock_Config+0xd8>)
 8000576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800057a:	4a27      	ldr	r2, [pc, #156]	; (8000618 <SystemClock_Config+0xd8>)
 800057c:	f023 0318 	bic.w	r3, r3, #24
 8000580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000584:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000588:	f002 f874 	bl	8002674 <HAL_PWREx_ControlVoltageScaling>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000592:	f000 f8fd 	bl	8000790 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000596:	2314      	movs	r3, #20
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800059e:	2301      	movs	r3, #1
 80005a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80005a6:	23a0      	movs	r3, #160	; 0xa0
 80005a8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f8b4 	bl	8002720 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005be:	f000 f8e7 	bl	8000790 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005c6:	2300      	movs	r3, #0
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005da:	2101      	movs	r1, #1
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fd05 	bl	8002fec <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005e8:	f000 f8d2 	bl	8000790 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80005ec:	2342      	movs	r3, #66	; 0x42
 80005ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fefa 	bl	80033f4 <HAL_RCCEx_PeriphCLKConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000606:	f000 f8c3 	bl	8000790 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800060a:	f003 f879 	bl	8003700 <HAL_RCCEx_EnableMSIPLLMode>
}
 800060e:	bf00      	nop
 8000610:	3790      	adds	r7, #144	; 0x90
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40021000 	.word	0x40021000

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_I2C1_Init+0x74>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <MX_I2C1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6010C7FF;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_I2C1_Init+0x74>)
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <MX_I2C1_Init+0x7c>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 800062c:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_I2C1_Init+0x74>)
 800062e:	2202      	movs	r2, #2
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_I2C1_Init+0x74>)
 8000634:	2201      	movs	r2, #1
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_I2C1_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <MX_I2C1_Init+0x74>)
 8000658:	f000 fd88 	bl	800116c <HAL_I2C_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000662:	f000 f895 	bl	8000790 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <MX_I2C1_Init+0x74>)
 800066a:	f001 ff4d 	bl	8002508 <HAL_I2CEx_ConfigAnalogFilter>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000674:	f000 f88c 	bl	8000790 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000678:	2100      	movs	r1, #0
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_I2C1_Init+0x74>)
 800067c:	f001 ff8f 	bl	800259e <HAL_I2CEx_ConfigDigitalFilter>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f000 f883 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000028 	.word	0x20000028
 8000694:	40005400 	.word	0x40005400
 8000698:	6010c7ff 	.word	0x6010c7ff

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART2_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006e0:	f003 f81e 	bl	8003720 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f851 	bl	8000790 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000074 	.word	0x20000074
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a1c      	ldr	r2, [pc, #112]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <MX_GPIO_Init+0x8c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a10      	ldr	r2, [pc, #64]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_GPIO_Init+0x8c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2108      	movs	r1, #8
 800075e:	480b      	ldr	r0, [pc, #44]	; (800078c <MX_GPIO_Init+0x90>)
 8000760:	f000 fcec 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000764:	2308      	movs	r3, #8
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0x90>)
 800077c:	f000 fb6c 	bl	8000e58 <HAL_GPIO_Init>

}
 8000780:	bf00      	nop
 8000782:	3720      	adds	r7, #32
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40021000 	.word	0x40021000
 800078c:	48000400 	.word	0x48000400

08000790 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000794:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000796:	e7fe      	b.n	8000796 <Error_Handler+0x6>

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_MspInit+0x44>)
 80007a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6613      	str	r3, [r2, #96]	; 0x60
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <HAL_MspInit+0x44>)
 80007b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ba:	4a08      	ldr	r2, [pc, #32]	; (80007dc <HAL_MspInit+0x44>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6593      	str	r3, [r2, #88]	; 0x58
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <HAL_I2C_MspInit+0xa0>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d139      	bne.n	8000876 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <HAL_I2C_MspInit+0xa4>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <HAL_I2C_MspInit+0xa4>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <HAL_I2C_MspInit+0xa4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800081a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000820:	2312      	movs	r3, #18
 8000822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000824:	2301      	movs	r3, #1
 8000826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000828:	2303      	movs	r3, #3
 800082a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800082c:	2304      	movs	r3, #4
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 fb0d 	bl	8000e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_I2C_MspInit+0xa4>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000842:	4a10      	ldr	r2, [pc, #64]	; (8000884 <HAL_I2C_MspInit+0xa4>)
 8000844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000848:	6593      	str	r3, [r2, #88]	; 0x58
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_I2C_MspInit+0xa4>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	201f      	movs	r0, #31
 800085c:	f000 fa77 	bl	8000d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000860:	201f      	movs	r0, #31
 8000862:	f000 fa90 	bl	8000d86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2020      	movs	r0, #32
 800086c:	f000 fa6f 	bl	8000d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000870:	2020      	movs	r0, #32
 8000872:	f000 fa88 	bl	8000d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40005400 	.word	0x40005400
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a20      	ldr	r2, [pc, #128]	; (8000928 <HAL_UART_MspInit+0xa0>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d13a      	bne.n	8000920 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b4:	6593      	str	r3, [r2, #88]	; 0x58
 80008b6:	4b1d      	ldr	r3, [pc, #116]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a19      	ldr	r2, [pc, #100]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <HAL_UART_MspInit+0xa4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80008da:	2304      	movs	r3, #4
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ea:	2307      	movs	r3, #7
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f000 faae 	bl	8000e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800090e:	2303      	movs	r3, #3
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fa9c 	bl	8000e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40004400 	.word	0x40004400
 800092c:	40021000 	.word	0x40021000

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f8ca 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <I2C1_EV_IRQHandler+0x10>)
 800098a:	f000 fe69 	bl	8001660 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000028 	.word	0x20000028

08000998 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <I2C1_ER_IRQHandler+0x10>)
 800099e:	f000 fe79 	bl	8001694 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000028 	.word	0x20000028

080009ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <SystemInit+0x64>)
 80009b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <SystemInit+0x64>)
 80009b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <SystemInit+0x68>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a13      	ldr	r2, [pc, #76]	; (8000a14 <SystemInit+0x68>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <SystemInit+0x68>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <SystemInit+0x68>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <SystemInit+0x68>)
 80009d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <SystemInit+0x68>)
 80009e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <SystemInit+0x68>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <SystemInit+0x68>)
 80009f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80009f6:	4b07      	ldr	r3, [pc, #28]	; (8000a14 <SystemInit+0x68>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <SystemInit+0x64>)
 80009fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a02:	609a      	str	r2, [r3, #8]
#endif
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00
 8000a14:	40021000 	.word	0x40021000

08000a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a50 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a1c:	f7ff ffc6 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a20:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a22:	e003      	b.n	8000a2c <LoopCopyDataInit>

08000a24 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a24:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a26:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a28:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a2a:	3104      	adds	r1, #4

08000a2c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a30:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a32:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a34:	d3f6      	bcc.n	8000a24 <CopyDataInit>
	ldr	r2, =_sbss
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a38:	e002      	b.n	8000a40 <LoopFillZerobss>

08000a3a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a3a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a3c:	f842 3b04 	str.w	r3, [r2], #4

08000a40 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <LoopForever+0x16>)
	cmp	r2, r3
 8000a42:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a44:	d3f9      	bcc.n	8000a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a46:	f003 fa51 	bl	8003eec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4a:	f7ff fd3f 	bl	80004cc <main>

08000a4e <LoopForever>:

LoopForever:
    b LoopForever
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a50:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000a54:	08003fb4 	.word	0x08003fb4
	ldr	r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a60:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a64:	200000f8 	.word	0x200000f8

08000a68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC1_2_IRQHandler>

08000a6a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a74:	2003      	movs	r0, #3
 8000a76:	f000 f95f 	bl	8000d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f000 f80e 	bl	8000a9c <HAL_InitTick>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d002      	beq.n	8000a8c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	e001      	b.n	8000a90 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8c:	f7ff fe84 	bl	8000798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a90:	79fb      	ldrb	r3, [r7, #7]
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_InitTick+0x6c>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d023      	beq.n	8000af8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_InitTick+0x70>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_InitTick+0x6c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000abe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f96b 	bl	8000da2 <HAL_SYSTICK_Config>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10f      	bne.n	8000af2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d809      	bhi.n	8000aec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae0:	f000 f935 	bl	8000d4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_InitTick+0x74>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	e007      	b.n	8000afc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
 8000af0:	e004      	b.n	8000afc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	73fb      	strb	r3, [r7, #15]
 8000af6:	e001      	b.n	8000afc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000af8:	2301      	movs	r3, #1
 8000afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3710      	adds	r7, #16
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200000f4 	.word	0x200000f4

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200000f4 	.word	0x200000f4

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff ffee 	bl	8000b3c <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_Delay+0x40>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffde 	bl	8000b3c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000008 	.word	0x20000008

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	db0b      	blt.n	8000c26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f003 021f 	and.w	r2, r3, #31
 8000c14:	4907      	ldr	r1, [pc, #28]	; (8000c34 <__NVIC_EnableIRQ+0x38>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	095b      	lsrs	r3, r3, #5
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	; (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	; (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	; 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d04:	d301      	bcc.n	8000d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00f      	b.n	8000d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0a:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <SysTick_Config+0x40>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3b01      	subs	r3, #1
 8000d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d12:	210f      	movs	r1, #15
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d18:	f7ff ff8e 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <SysTick_Config+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <SysTick_Config+0x40>)
 8000d24:	2207      	movs	r2, #7
 8000d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	e000e010 	.word	0xe000e010

08000d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f7ff ff29 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b086      	sub	sp, #24
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	4603      	mov	r3, r0
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d60:	f7ff ff3e 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68b9      	ldr	r1, [r7, #8]
 8000d6a:	6978      	ldr	r0, [r7, #20]
 8000d6c:	f7ff ff8e 	bl	8000c8c <NVIC_EncodePriority>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d76:	4611      	mov	r1, r2
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff5d 	bl	8000c38 <__NVIC_SetPriority>
}
 8000d7e:	bf00      	nop
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b082      	sub	sp, #8
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff31 	bl	8000bfc <__NVIC_EnableIRQ>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff ffa2 	bl	8000cf4 <SysTick_Config>
 8000db0:	4603      	mov	r3, r0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d005      	beq.n	8000dde <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	73fb      	strb	r3, [r7, #15]
 8000ddc:	e029      	b.n	8000e32 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 020e 	bic.w	r2, r2, #14
 8000dec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f022 0201 	bic.w	r2, r2, #1
 8000dfc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f003 021c 	and.w	r2, r3, #28
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e10:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	4798      	blx	r3
    }
  }
  return status;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e4a:	b2db      	uxtb	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	e14e      	b.n	8001106 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	fa01 f303 	lsl.w	r3, r1, r3
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8140 	beq.w	8001100 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d00b      	beq.n	8000ea0 <HAL_GPIO_Init+0x48>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e94:	2b11      	cmp	r3, #17
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b12      	cmp	r3, #18
 8000e9e:	d130      	bne.n	8000f02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	f003 0201 	and.w	r2, r3, #1
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0xea>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d123      	bne.n	8000f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f003 0307 	and.w	r3, r3, #7
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	6939      	ldr	r1, [r7, #16]
 8000f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f003 0203 	and.w	r2, r3, #3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 809a 	beq.w	8001100 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fcc:	4b55      	ldr	r3, [pc, #340]	; (8001124 <HAL_GPIO_Init+0x2cc>)
 8000fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd0:	4a54      	ldr	r2, [pc, #336]	; (8001124 <HAL_GPIO_Init+0x2cc>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd8:	4b52      	ldr	r3, [pc, #328]	; (8001124 <HAL_GPIO_Init+0x2cc>)
 8000fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe4:	4a50      	ldr	r2, [pc, #320]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800100e:	d013      	beq.n	8001038 <HAL_GPIO_Init+0x1e0>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	4a46      	ldr	r2, [pc, #280]	; (800112c <HAL_GPIO_Init+0x2d4>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d00d      	beq.n	8001034 <HAL_GPIO_Init+0x1dc>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a45      	ldr	r2, [pc, #276]	; (8001130 <HAL_GPIO_Init+0x2d8>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d007      	beq.n	8001030 <HAL_GPIO_Init+0x1d8>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_GPIO_Init+0x2dc>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d101      	bne.n	800102c <HAL_GPIO_Init+0x1d4>
 8001028:	2303      	movs	r3, #3
 800102a:	e006      	b.n	800103a <HAL_GPIO_Init+0x1e2>
 800102c:	2307      	movs	r3, #7
 800102e:	e004      	b.n	800103a <HAL_GPIO_Init+0x1e2>
 8001030:	2302      	movs	r3, #2
 8001032:	e002      	b.n	800103a <HAL_GPIO_Init+0x1e2>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_GPIO_Init+0x1e2>
 8001038:	2300      	movs	r3, #0
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	f002 0203 	and.w	r2, r2, #3
 8001040:	0092      	lsls	r2, r2, #2
 8001042:	4093      	lsls	r3, r2
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800104a:	4937      	ldr	r1, [pc, #220]	; (8001128 <HAL_GPIO_Init+0x2d0>)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	3302      	adds	r3, #2
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001058:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_GPIO_Init+0x2e0>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800107c:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <HAL_GPIO_Init+0x2e0>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <HAL_GPIO_Init+0x2e0>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a6:	4a24      	ldr	r2, [pc, #144]	; (8001138 <HAL_GPIO_Init+0x2e0>)
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_GPIO_Init+0x2e0>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d0:	4a19      	ldr	r2, [pc, #100]	; (8001138 <HAL_GPIO_Init+0x2e0>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d6:	4b18      	ldr	r3, [pc, #96]	; (8001138 <HAL_GPIO_Init+0x2e0>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_GPIO_Init+0x2e0>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3301      	adds	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	fa22 f303 	lsr.w	r3, r2, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	f47f aea9 	bne.w	8000e68 <HAL_GPIO_Init+0x10>
  }
}
 8001116:	bf00      	nop
 8001118:	371c      	adds	r7, #28
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000
 8001128:	40010000 	.word	0x40010000
 800112c:	48000400 	.word	0x48000400
 8001130:	48000800 	.word	0x48000800
 8001134:	48000c00 	.word	0x48000c00
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001158:	e002      	b.n	8001160 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e081      	b.n	8001282 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d106      	bne.n	8001198 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fb24 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2224      	movs	r2, #36	; 0x24
 800119c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	e006      	b.n	80011f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d104      	bne.n	8001206 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001204:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001218:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	ea42 0103 	orr.w	r1, r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	021a      	lsls	r2, r3, #8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69d9      	ldr	r1, [r3, #28]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f042 0201 	orr.w	r2, r2, #1
 8001262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2220      	movs	r2, #32
 800126e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af02      	add	r7, sp, #8
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	461a      	mov	r2, r3
 8001298:	460b      	mov	r3, r1
 800129a:	817b      	strh	r3, [r7, #10]
 800129c:	4613      	mov	r3, r2
 800129e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b20      	cmp	r3, #32
 80012aa:	f040 80da 	bne.w	8001462 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d101      	bne.n	80012bc <HAL_I2C_Master_Transmit+0x30>
 80012b8:	2302      	movs	r3, #2
 80012ba:	e0d3      	b.n	8001464 <HAL_I2C_Master_Transmit+0x1d8>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012c4:	f7ff fc3a 	bl	8000b3c <HAL_GetTick>
 80012c8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2319      	movs	r3, #25
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 fefb 	bl	80020d2 <I2C_WaitOnFlagUntilTimeout>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0be      	b.n	8001464 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2221      	movs	r2, #33	; 0x21
 80012ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2210      	movs	r2, #16
 80012f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2200      	movs	r2, #0
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	893a      	ldrh	r2, [r7, #8]
 8001306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001312:	b29b      	uxth	r3, r3
 8001314:	2bff      	cmp	r3, #255	; 0xff
 8001316:	d90e      	bls.n	8001336 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	22ff      	movs	r2, #255	; 0xff
 800131c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001322:	b2da      	uxtb	r2, r3
 8001324:	8979      	ldrh	r1, [r7, #10]
 8001326:	4b51      	ldr	r3, [pc, #324]	; (800146c <HAL_I2C_Master_Transmit+0x1e0>)
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f001 f85e 	bl	80023f0 <I2C_TransferConfig>
 8001334:	e06c      	b.n	8001410 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001344:	b2da      	uxtb	r2, r3
 8001346:	8979      	ldrh	r1, [r7, #10]
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <HAL_I2C_Master_Transmit+0x1e0>)
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f001 f84d 	bl	80023f0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001356:	e05b      	b.n	8001410 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	6a39      	ldr	r1, [r7, #32]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 fef8 	bl	8002152 <I2C_WaitOnTXISFlagUntilTimeout>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e07b      	b.n	8001464 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001386:	b29b      	uxth	r3, r3
 8001388:	3b01      	subs	r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001394:	3b01      	subs	r3, #1
 8001396:	b29a      	uxth	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d034      	beq.n	8001410 <HAL_I2C_Master_Transmit+0x184>
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d130      	bne.n	8001410 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	2200      	movs	r2, #0
 80013b6:	2180      	movs	r1, #128	; 0x80
 80013b8:	68f8      	ldr	r0, [r7, #12]
 80013ba:	f000 fe8a 	bl	80020d2 <I2C_WaitOnFlagUntilTimeout>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e04d      	b.n	8001464 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d90e      	bls.n	80013f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	22ff      	movs	r2, #255	; 0xff
 80013d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	8979      	ldrh	r1, [r7, #10]
 80013e0:	2300      	movs	r3, #0
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f001 f801 	bl	80023f0 <I2C_TransferConfig>
 80013ee:	e00f      	b.n	8001410 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	8979      	ldrh	r1, [r7, #10]
 8001402:	2300      	movs	r3, #0
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 fff0 	bl	80023f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29b      	uxth	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d19e      	bne.n	8001358 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141a:	697a      	ldr	r2, [r7, #20]
 800141c:	6a39      	ldr	r1, [r7, #32]
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	f000 fed7 	bl	80021d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e01a      	b.n	8001464 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	2220      	movs	r2, #32
 8001434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <HAL_I2C_Master_Transmit+0x1e4>)
 8001442:	400b      	ands	r3, r1
 8001444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2220      	movs	r2, #32
 800144a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001462:	2302      	movs	r3, #2
  }
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	80002000 	.word	0x80002000
 8001470:	fe00e800 	.word	0xfe00e800

08001474 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af02      	add	r7, sp, #8
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	461a      	mov	r2, r3
 8001480:	460b      	mov	r3, r1
 8001482:	817b      	strh	r3, [r7, #10]
 8001484:	4613      	mov	r3, r2
 8001486:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b20      	cmp	r3, #32
 8001492:	f040 80db 	bne.w	800164c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_I2C_Master_Receive+0x30>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e0d4      	b.n	800164e <HAL_I2C_Master_Receive+0x1da>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014ac:	f7ff fb46 	bl	8000b3c <HAL_GetTick>
 80014b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2319      	movs	r3, #25
 80014b8:	2201      	movs	r2, #1
 80014ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 fe07 	bl	80020d2 <I2C_WaitOnFlagUntilTimeout>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0bf      	b.n	800164e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2222      	movs	r2, #34	; 0x22
 80014d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2210      	movs	r2, #16
 80014da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	893a      	ldrh	r2, [r7, #8]
 80014ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	2bff      	cmp	r3, #255	; 0xff
 80014fe:	d90e      	bls.n	800151e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	22ff      	movs	r2, #255	; 0xff
 8001504:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150a:	b2da      	uxtb	r2, r3
 800150c:	8979      	ldrh	r1, [r7, #10]
 800150e:	4b52      	ldr	r3, [pc, #328]	; (8001658 <HAL_I2C_Master_Receive+0x1e4>)
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f000 ff6a 	bl	80023f0 <I2C_TransferConfig>
 800151c:	e06d      	b.n	80015fa <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001522:	b29a      	uxth	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152c:	b2da      	uxtb	r2, r3
 800152e:	8979      	ldrh	r1, [r7, #10]
 8001530:	4b49      	ldr	r3, [pc, #292]	; (8001658 <HAL_I2C_Master_Receive+0x1e4>)
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 ff59 	bl	80023f0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800153e:	e05c      	b.n	80015fa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	6a39      	ldr	r1, [r7, #32]
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 fe81 	bl	800224c <I2C_WaitOnRXNEFlagUntilTimeout>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e07c      	b.n	800164e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001570:	3b01      	subs	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158a:	b29b      	uxth	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	d034      	beq.n	80015fa <HAL_I2C_Master_Receive+0x186>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001594:	2b00      	cmp	r3, #0
 8001596:	d130      	bne.n	80015fa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	2200      	movs	r2, #0
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 fd95 	bl	80020d2 <I2C_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e04d      	b.n	800164e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	2bff      	cmp	r3, #255	; 0xff
 80015ba:	d90e      	bls.n	80015da <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	22ff      	movs	r2, #255	; 0xff
 80015c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	8979      	ldrh	r1, [r7, #10]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9300      	str	r3, [sp, #0]
 80015ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f000 ff0c 	bl	80023f0 <I2C_TransferConfig>
 80015d8:	e00f      	b.n	80015fa <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015de:	b29a      	uxth	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	8979      	ldrh	r1, [r7, #10]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 fefb 	bl	80023f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d19d      	bne.n	8001540 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001604:	697a      	ldr	r2, [r7, #20]
 8001606:	6a39      	ldr	r1, [r7, #32]
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fde2 	bl	80021d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e01a      	b.n	800164e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2220      	movs	r2, #32
 800161e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_I2C_Master_Receive+0x1e8>)
 800162c:	400b      	ands	r3, r1
 800162e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2220      	movs	r2, #32
 8001634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001648:	2300      	movs	r3, #0
 800164a:	e000      	b.n	800164e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800164c:	2302      	movs	r3, #2
  }
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	80002400 	.word	0x80002400
 800165c:	fe00e800 	.word	0xfe00e800

08001660 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	68f9      	ldr	r1, [r7, #12]
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	4798      	blx	r3
  }
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	0a1b      	lsrs	r3, r3, #8
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d010      	beq.n	80016da <HAL_I2C_ER_IRQHandler+0x46>
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	09db      	lsrs	r3, r3, #7
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d00a      	beq.n	80016da <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	0a9b      	lsrs	r3, r3, #10
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d010      	beq.n	8001708 <HAL_I2C_ER_IRQHandler+0x74>
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	09db      	lsrs	r3, r3, #7
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f043 0208 	orr.w	r2, r3, #8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001706:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	0a5b      	lsrs	r3, r3, #9
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d010      	beq.n	8001736 <HAL_I2C_ER_IRQHandler+0xa2>
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	09db      	lsrs	r3, r3, #7
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00a      	beq.n	8001736 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f043 0202 	orr.w	r2, r3, #2
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001734:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 030b 	and.w	r3, r3, #11
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001746:	68f9      	ldr	r1, [r7, #12]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 fb89 	bl	8001e60 <I2C_ITError>
  }
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	460b      	mov	r3, r1
 8001788:	70fb      	strb	r3, [r7, #3]
 800178a:	4613      	mov	r3, r2
 800178c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	60f8      	str	r0, [r7, #12]
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <I2C_Slave_ISR_IT+0x24>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e0ec      	b.n	80019d4 <I2C_Slave_ISR_IT+0x1fe>
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <I2C_Slave_ISR_IT+0x4c>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	095b      	lsrs	r3, r3, #5
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800181a:	6939      	ldr	r1, [r7, #16]
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f000 f9bf 	bl	8001ba0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d04d      	beq.n	80018ca <I2C_Slave_ISR_IT+0xf4>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b00      	cmp	r3, #0
 8001838:	d047      	beq.n	80018ca <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	d128      	bne.n	8001896 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b28      	cmp	r3, #40	; 0x28
 800184e:	d108      	bne.n	8001862 <I2C_Slave_ISR_IT+0x8c>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001856:	d104      	bne.n	8001862 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001858:	6939      	ldr	r1, [r7, #16]
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 faaa 	bl	8001db4 <I2C_ITListenCplt>
 8001860:	e032      	b.n	80018c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b29      	cmp	r3, #41	; 0x29
 800186c:	d10e      	bne.n	800188c <I2C_Slave_ISR_IT+0xb6>
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001874:	d00a      	beq.n	800188c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2210      	movs	r2, #16
 800187c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 fbe5 	bl	800204e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f92d 	bl	8001ae4 <I2C_ITSlaveSeqCplt>
 800188a:	e01d      	b.n	80018c8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2210      	movs	r2, #16
 8001892:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001894:	e096      	b.n	80019c4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2210      	movs	r2, #16
 800189c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f043 0204 	orr.w	r2, r3, #4
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <I2C_Slave_ISR_IT+0xe4>
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b6:	f040 8085 	bne.w	80019c4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	4619      	mov	r1, r3
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 facd 	bl	8001e60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80018c6:	e07d      	b.n	80019c4 <I2C_Slave_ISR_IT+0x1ee>
 80018c8:	e07c      	b.n	80019c4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d030      	beq.n	8001938 <I2C_Slave_ISR_IT+0x162>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d02a      	beq.n	8001938 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d018      	beq.n	800191e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001908:	3b01      	subs	r3, #1
 800190a:	b29a      	uxth	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001914:	b29b      	uxth	r3, r3
 8001916:	3b01      	subs	r3, #1
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29b      	uxth	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d14f      	bne.n	80019c8 <I2C_Slave_ISR_IT+0x1f2>
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800192e:	d04b      	beq.n	80019c8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f8d7 	bl	8001ae4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001936:	e047      	b.n	80019c8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d00a      	beq.n	800195a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800194c:	2b00      	cmp	r3, #0
 800194e:	d004      	beq.n	800195a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001950:	6939      	ldr	r1, [r7, #16]
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f842 	bl	80019dc <I2C_ITAddrCplt>
 8001958:	e037      	b.n	80019ca <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	085b      	lsrs	r3, r3, #1
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	d031      	beq.n	80019ca <I2C_Slave_ISR_IT+0x1f4>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d02b      	beq.n	80019ca <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001976:	b29b      	uxth	r3, r3
 8001978:	2b00      	cmp	r3, #0
 800197a:	d018      	beq.n	80019ae <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001996:	b29b      	uxth	r3, r3
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	3b01      	subs	r3, #1
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	851a      	strh	r2, [r3, #40]	; 0x28
 80019ac:	e00d      	b.n	80019ca <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d002      	beq.n	80019bc <I2C_Slave_ISR_IT+0x1e6>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d106      	bne.n	80019ca <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 f891 	bl	8001ae4 <I2C_ITSlaveSeqCplt>
 80019c2:	e002      	b.n	80019ca <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80019c4:	bf00      	nop
 80019c6:	e000      	b.n	80019ca <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80019c8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80019f2:	2b28      	cmp	r3, #40	; 0x28
 80019f4:	d16a      	bne.n	8001acc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	0c1b      	lsrs	r3, r3, #16
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a14:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a22:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001a30:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d138      	bne.n	8001aac <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001a3a:	897b      	ldrh	r3, [r7, #10]
 8001a3c:	09db      	lsrs	r3, r3, #7
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	89bb      	ldrh	r3, [r7, #12]
 8001a42:	4053      	eors	r3, r2
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	f003 0306 	and.w	r3, r3, #6
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d11c      	bne.n	8001a88 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001a4e:	897b      	ldrh	r3, [r7, #10]
 8001a50:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d13b      	bne.n	8001adc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2208      	movs	r2, #8
 8001a70:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a7a:	89ba      	ldrh	r2, [r7, #12]
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fe7c 	bl	800177e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001a86:	e029      	b.n	8001adc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001a88:	893b      	ldrh	r3, [r7, #8]
 8001a8a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fcdb 	bl	800244c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001a9e:	89ba      	ldrh	r2, [r7, #12]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fe6a 	bl	800177e <HAL_I2C_AddrCallback>
}
 8001aaa:	e017      	b.n	8001adc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001aac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 fccb 	bl	800244c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001abe:	89ba      	ldrh	r2, [r7, #12]
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff fe5a 	bl	800177e <HAL_I2C_AddrCallback>
}
 8001aca:	e007      	b.n	8001adc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	0b9b      	lsrs	r3, r3, #14
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e00d      	b.n	8001b36 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	0bdb      	lsrs	r3, r3, #15
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b29      	cmp	r3, #41	; 0x29
 8001b40:	d112      	bne.n	8001b68 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2228      	movs	r2, #40	; 0x28
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2221      	movs	r2, #33	; 0x21
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b50:	2101      	movs	r1, #1
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fc7a 	bl	800244c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fdf8 	bl	8001756 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001b66:	e017      	b.n	8001b98 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b2a      	cmp	r3, #42	; 0x2a
 8001b72:	d111      	bne.n	8001b98 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2228      	movs	r2, #40	; 0x28
 8001b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2222      	movs	r2, #34	; 0x22
 8001b80:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001b82:	2102      	movs	r1, #2
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fc61 	bl	800244c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fde9 	bl	800176a <HAL_I2C_SlaveRxCpltCallback>
}
 8001b98:	bf00      	nop
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2220      	movs	r2, #32
 8001bc4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b21      	cmp	r3, #33	; 0x21
 8001bca:	d002      	beq.n	8001bd2 <I2C_ITSlaveCplt+0x32>
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	2b29      	cmp	r3, #41	; 0x29
 8001bd0:	d108      	bne.n	8001be4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001bd2:	f248 0101 	movw	r1, #32769	; 0x8001
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fc38 	bl	800244c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2221      	movs	r2, #33	; 0x21
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30
 8001be2:	e00d      	b.n	8001c00 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b22      	cmp	r3, #34	; 0x22
 8001be8:	d002      	beq.n	8001bf0 <I2C_ITSlaveCplt+0x50>
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	2b2a      	cmp	r3, #42	; 0x2a
 8001bee:	d107      	bne.n	8001c00 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001bf0:	f248 0102 	movw	r1, #32770	; 0x8002
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fc29 	bl	800244c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2222      	movs	r2, #34	; 0x22
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c0e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6859      	ldr	r1, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b64      	ldr	r3, [pc, #400]	; (8001dac <I2C_ITSlaveCplt+0x20c>)
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fa14 	bl	800204e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	0b9b      	lsrs	r3, r3, #14
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d013      	beq.n	8001c5a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c40:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d020      	beq.n	8001c8c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c58:	e018      	b.n	8001c8c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	0bdb      	lsrs	r3, r3, #15
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d006      	beq.n	8001c8c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00c      	beq.n	8001cda <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	f043 0204 	orr.w	r2, r3, #4
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f8a7 	bl	8001e60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b28      	cmp	r3, #40	; 0x28
 8001d1c:	d141      	bne.n	8001da2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001d1e:	6979      	ldr	r1, [r7, #20]
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f847 	bl	8001db4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001d26:	e03c      	b.n	8001da2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d30:	d014      	beq.n	8001d5c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff fed6 	bl	8001ae4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <I2C_ITSlaveCplt+0x210>)
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fd20 	bl	800179a <HAL_I2C_ListenCpltCallback>
}
 8001d5a:	e022      	b.n	8001da2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b22      	cmp	r3, #34	; 0x22
 8001d66:	d10e      	bne.n	8001d86 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fcf3 	bl	800176a <HAL_I2C_SlaveRxCpltCallback>
}
 8001d84:	e00d      	b.n	8001da2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff fcda 	bl	8001756 <HAL_I2C_SlaveTxCpltCallback>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	fe00e800 	.word	0xfe00e800
 8001db0:	ffff0000 	.word	0xffff0000

08001db4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <I2C_ITListenCplt+0xa8>)
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d022      	beq.n	8001e32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d012      	beq.n	8001e32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f043 0204 	orr.w	r2, r3, #4
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001e32:	f248 0103 	movw	r1, #32771	; 0x8003
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 fb08 	bl	800244c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2210      	movs	r2, #16
 8001e42:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f7ff fca4 	bl	800179a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	ffff0000 	.word	0xffff0000

08001e60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a5d      	ldr	r2, [pc, #372]	; (8001ff4 <I2C_ITError+0x194>)
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b28      	cmp	r3, #40	; 0x28
 8001e96:	d005      	beq.n	8001ea4 <I2C_ITError+0x44>
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	2b29      	cmp	r3, #41	; 0x29
 8001e9c:	d002      	beq.n	8001ea4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8001ea2:	d10b      	bne.n	8001ebc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 fad0 	bl	800244c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2228      	movs	r2, #40	; 0x28
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a50      	ldr	r2, [pc, #320]	; (8001ff8 <I2C_ITError+0x198>)
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001eba:	e011      	b.n	8001ee0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001ebc:	f248 0103 	movw	r1, #32771	; 0x8003
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fac3 	bl	800244c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b60      	cmp	r3, #96	; 0x60
 8001ed0:	d003      	beq.n	8001eda <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d039      	beq.n	8001f62 <I2C_ITError+0x102>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b11      	cmp	r3, #17
 8001ef2:	d002      	beq.n	8001efa <I2C_ITError+0x9a>
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b21      	cmp	r3, #33	; 0x21
 8001ef8:	d133      	bne.n	8001f62 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f08:	d107      	bne.n	8001f1a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe ff8c 	bl	8000e3c <HAL_DMA_GetState>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d017      	beq.n	8001f5a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2e:	4a33      	ldr	r2, [pc, #204]	; (8001ffc <I2C_ITError+0x19c>)
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe ff3b 	bl	8000dba <HAL_DMA_Abort_IT>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d04d      	beq.n	8001fe6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f54:	4610      	mov	r0, r2
 8001f56:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f58:	e045      	b.n	8001fe6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f850 	bl	8002000 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001f60:	e041      	b.n	8001fe6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d039      	beq.n	8001fde <I2C_ITError+0x17e>
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b12      	cmp	r3, #18
 8001f6e:	d002      	beq.n	8001f76 <I2C_ITError+0x116>
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b22      	cmp	r3, #34	; 0x22
 8001f74:	d133      	bne.n	8001fde <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f84:	d107      	bne.n	8001f96 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe ff4e 	bl	8000e3c <HAL_DMA_GetState>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d017      	beq.n	8001fd6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <I2C_ITError+0x19c>)
 8001fac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fefd 	bl	8000dba <HAL_DMA_Abort_IT>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d011      	beq.n	8001fea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fd4:	e009      	b.n	8001fea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f812 	bl	8002000 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fdc:	e005      	b.n	8001fea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f80e 	bl	8002000 <I2C_TreatErrorCallback>
  }
}
 8001fe4:	e002      	b.n	8001fec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001fe6:	bf00      	nop
 8001fe8:	e000      	b.n	8001fec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001fea:	bf00      	nop
}
 8001fec:	bf00      	nop
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	ffff0000 	.word	0xffff0000
 8001ff8:	080017d7 	.word	0x080017d7
 8001ffc:	08002097 	.word	0x08002097

08002000 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b60      	cmp	r3, #96	; 0x60
 8002012:	d10e      	bne.n	8002032 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fbc9 	bl	80017c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002030:	e009      	b.n	8002046 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fbb4 	bl	80017ae <HAL_I2C_ErrorCallback>
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b02      	cmp	r3, #2
 8002062:	d103      	bne.n	800206c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b01      	cmp	r3, #1
 8002078:	d007      	beq.n	800208a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	619a      	str	r2, [r3, #24]
  }
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	2200      	movs	r2, #0
 80020b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c0:	2200      	movs	r2, #0
 80020c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7ff ff9b 	bl	8002000 <I2C_TreatErrorCallback>
}
 80020ca:	bf00      	nop
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	4613      	mov	r3, r2
 80020e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e2:	e022      	b.n	800212a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020ea:	d01e      	beq.n	800212a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ec:	f7fe fd26 	bl	8000b3c <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d302      	bcc.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d113      	bne.n	800212a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f043 0220 	orr.w	r2, r3, #32
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e00f      	b.n	800214a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699a      	ldr	r2, [r3, #24]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4013      	ands	r3, r2
 8002134:	68ba      	ldr	r2, [r7, #8]
 8002136:	429a      	cmp	r2, r3
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	79fb      	ldrb	r3, [r7, #7]
 8002144:	429a      	cmp	r2, r3
 8002146:	d0cd      	beq.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800215e:	e02c      	b.n	80021ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f8dd 	bl	8002324 <I2C_IsAcknowledgeFailed>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e02a      	b.n	80021ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217a:	d01e      	beq.n	80021ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217c:	f7fe fcde 	bl	8000b3c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	429a      	cmp	r2, r3
 800218a:	d302      	bcc.n	8002192 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d113      	bne.n	80021ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f043 0220 	orr.w	r2, r3, #32
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e007      	b.n	80021ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d1cb      	bne.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021de:	e028      	b.n	8002232 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	68b9      	ldr	r1, [r7, #8]
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f000 f89d 	bl	8002324 <I2C_IsAcknowledgeFailed>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e026      	b.n	8002242 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f4:	f7fe fca2 	bl	8000b3c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	429a      	cmp	r2, r3
 8002202:	d302      	bcc.n	800220a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d113      	bne.n	8002232 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f043 0220 	orr.w	r2, r3, #32
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2220      	movs	r2, #32
 800221a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e007      	b.n	8002242 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b20      	cmp	r3, #32
 800223e:	d1cf      	bne.n	80021e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002258:	e055      	b.n	8002306 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68b9      	ldr	r1, [r7, #8]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f860 	bl	8002324 <I2C_IsAcknowledgeFailed>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e053      	b.n	8002316 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b20      	cmp	r3, #32
 800227a:	d129      	bne.n	80022d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b04      	cmp	r3, #4
 8002288:	d105      	bne.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e03f      	b.n	8002316 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2220      	movs	r2, #32
 800229c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80022aa:	400b      	ands	r3, r1
 80022ac:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e022      	b.n	8002316 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022d0:	f7fe fc34 	bl	8000b3c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d302      	bcc.n	80022e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e007      	b.n	8002316 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b04      	cmp	r3, #4
 8002312:	d1a2      	bne.n	800225a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	fe00e800 	.word	0xfe00e800

08002324 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b10      	cmp	r3, #16
 800233c:	d151      	bne.n	80023e2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800233e:	e022      	b.n	8002386 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002346:	d01e      	beq.n	8002386 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002348:	f7fe fbf8 	bl	8000b3c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	d302      	bcc.n	800235e <I2C_IsAcknowledgeFailed+0x3a>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d113      	bne.n	8002386 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f043 0220 	orr.w	r2, r3, #32
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e02e      	b.n	80023e4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	2b20      	cmp	r3, #32
 8002392:	d1d5      	bne.n	8002340 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2210      	movs	r2, #16
 800239a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2220      	movs	r2, #32
 80023a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fe52 	bl	800204e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <I2C_IsAcknowledgeFailed+0xc8>)
 80023b6:	400b      	ands	r3, r1
 80023b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f043 0204 	orr.w	r2, r3, #4
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2220      	movs	r2, #32
 80023ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3710      	adds	r7, #16
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	fe00e800 	.word	0xfe00e800

080023f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	817b      	strh	r3, [r7, #10]
 80023fe:	4613      	mov	r3, r2
 8002400:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	0d5b      	lsrs	r3, r3, #21
 800240c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <I2C_TransferConfig+0x58>)
 8002412:	430b      	orrs	r3, r1
 8002414:	43db      	mvns	r3, r3
 8002416:	ea02 0103 	and.w	r1, r2, r3
 800241a:	897b      	ldrh	r3, [r7, #10]
 800241c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002420:	7a7b      	ldrb	r3, [r7, #9]
 8002422:	041b      	lsls	r3, r3, #16
 8002424:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	431a      	orrs	r2, r3
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	03ff63ff 	.word	0x03ff63ff

0800244c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00f      	beq.n	8002486 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800246c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002474:	b2db      	uxtb	r3, r3
 8002476:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800247a:	2b28      	cmp	r3, #40	; 0x28
 800247c:	d003      	beq.n	8002486 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002484:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00f      	beq.n	80024b0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002496:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80024a4:	2b28      	cmp	r3, #40	; 0x28
 80024a6:	d003      	beq.n	80024b0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80024ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80024b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	da03      	bge.n	80024c0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80024be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d103      	bne.n	80024ce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d103      	bne.n	80024dc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f043 0320 	orr.w	r3, r3, #32
 80024da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80024dc:	887b      	ldrh	r3, [r7, #2]
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	d103      	bne.n	80024ea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43da      	mvns	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b20      	cmp	r3, #32
 800251c:	d138      	bne.n	8002590 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002528:	2302      	movs	r3, #2
 800252a:	e032      	b.n	8002592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2224      	movs	r2, #36	; 0x24
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800255a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2220      	movs	r2, #32
 8002580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	e000      	b.n	8002592 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002590:	2302      	movs	r3, #2
  }
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b20      	cmp	r3, #32
 80025b2:	d139      	bne.n	8002628 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025be:	2302      	movs	r3, #2
 80025c0:	e033      	b.n	800262a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2224      	movs	r2, #36	; 0x24
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0201 	orr.w	r2, r2, #1
 8002612:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40007000 	.word	0x40007000

08002658 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800265c:	4b04      	ldr	r3, [pc, #16]	; (8002670 <HAL_PWREx_GetVoltageRange+0x18>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000

08002674 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002682:	d130      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002684:	4b23      	ldr	r3, [pc, #140]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800268c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002690:	d038      	beq.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800269a:	4a1e      	ldr	r2, [pc, #120]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800269c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2232      	movs	r2, #50	; 0x32
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	4a1b      	ldr	r2, [pc, #108]	; (800271c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9b      	lsrs	r3, r3, #18
 80026b4:	3301      	adds	r3, #1
 80026b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026b8:	e002      	b.n	80026c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3b01      	subs	r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026cc:	d102      	bne.n	80026d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1f2      	bne.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026d4:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e0:	d110      	bne.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e00f      	b.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f2:	d007      	beq.n	8002704 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026fc:	4a05      	ldr	r2, [pc, #20]	; (8002714 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002702:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40007000 	.word	0x40007000
 8002718:	20000000 	.word	0x20000000
 800271c:	431bde83 	.word	0x431bde83

08002720 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	; 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	f000 bc56 	b.w	8002fe0 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002734:	4ba1      	ldr	r3, [pc, #644]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800273e:	4b9f      	ldr	r3, [pc, #636]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80e6 	beq.w	8002922 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_RCC_OscConfig+0x4c>
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	2b0c      	cmp	r3, #12
 8002760:	f040 808d 	bne.w	800287e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b01      	cmp	r3, #1
 8002768:	f040 8089 	bne.w	800287e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800276c:	4b93      	ldr	r3, [pc, #588]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d006      	beq.n	8002786 <HAL_RCC_OscConfig+0x66>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d102      	bne.n	8002786 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	f000 bc2d 	b.w	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800278a:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0308 	and.w	r3, r3, #8
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <HAL_RCC_OscConfig+0x80>
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800279e:	e005      	b.n	80027ac <HAL_RCC_OscConfig+0x8c>
 80027a0:	4b86      	ldr	r3, [pc, #536]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d224      	bcs.n	80027fa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 fdbd 	bl	8003334 <RCC_SetFlashLatencyFromMSIRange>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	f000 bc0d 	b.w	8002fe0 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c6:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7c      	ldr	r2, [pc, #496]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b7a      	ldr	r3, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	4977      	ldr	r1, [pc, #476]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e4:	4b75      	ldr	r3, [pc, #468]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	4972      	ldr	r1, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
 80027f8:	e025      	b.n	8002846 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027fa:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6f      	ldr	r2, [pc, #444]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002800:	f043 0308 	orr.w	r3, r3, #8
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	496a      	ldr	r1, [pc, #424]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	4965      	ldr	r1, [pc, #404]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fd7c 	bl	8003334 <RCC_SetFlashLatencyFromMSIRange>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e3cc      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002846:	f000 fcb3 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 800284a:	4601      	mov	r1, r0
 800284c:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	4a5a      	ldr	r2, [pc, #360]	; (80029c0 <HAL_RCC_OscConfig+0x2a0>)
 8002858:	5cd3      	ldrb	r3, [r2, r3]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	fa21 f303 	lsr.w	r3, r1, r3
 8002862:	4a58      	ldr	r2, [pc, #352]	; (80029c4 <HAL_RCC_OscConfig+0x2a4>)
 8002864:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002866:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_RCC_OscConfig+0x2a8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe f916 	bl	8000a9c <HAL_InitTick>
 8002870:	4603      	mov	r3, r0
 8002872:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d052      	beq.n	8002920 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800287a:	7dfb      	ldrb	r3, [r7, #23]
 800287c:	e3b0      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d032      	beq.n	80028ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002886:	4b4d      	ldr	r3, [pc, #308]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a4c      	ldr	r2, [pc, #304]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002892:	f7fe f953 	bl	8000b3c <HAL_GetTick>
 8002896:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800289a:	f7fe f94f 	bl	8000b3c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e399      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ac:	4b43      	ldr	r3, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d0f0      	beq.n	800289a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b8:	4b40      	ldr	r3, [pc, #256]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a3f      	ldr	r2, [pc, #252]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028be:	f043 0308 	orr.w	r3, r3, #8
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	493a      	ldr	r1, [pc, #232]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	4935      	ldr	r1, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
 80028ea:	e01a      	b.n	8002922 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a32      	ldr	r2, [pc, #200]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028f8:	f7fe f920 	bl	8000b3c <HAL_GetTick>
 80028fc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002900:	f7fe f91c 	bl	8000b3c <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e366      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002912:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x1e0>
 800291e:	e000      	b.n	8002922 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002920:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d073      	beq.n	8002a16 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x220>
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d10e      	bne.n	8002958 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d10b      	bne.n	8002958 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	4b1e      	ldr	r3, [pc, #120]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d063      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2f4>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d15f      	bne.n	8002a14 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e343      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002960:	d106      	bne.n	8002970 <HAL_RCC_OscConfig+0x250>
 8002962:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a15      	ldr	r2, [pc, #84]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0x28c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0x274>
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x28c>
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a08      	ldr	r2, [pc, #32]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <HAL_RCC_OscConfig+0x29c>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d01b      	beq.n	80029ec <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe f8c2 	bl	8000b3c <HAL_GetTick>
 80029b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ba:	e010      	b.n	80029de <HAL_RCC_OscConfig+0x2be>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	08003f5c 	.word	0x08003f5c
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029cc:	f7fe f8b6 	bl	8000b3c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b64      	cmp	r3, #100	; 0x64
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e300      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029de:	4ba0      	ldr	r3, [pc, #640]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0f0      	beq.n	80029cc <HAL_RCC_OscConfig+0x2ac>
 80029ea:	e014      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe f8a6 	bl	8000b3c <HAL_GetTick>
 80029f0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe f8a2 	bl	8000b3c <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	; 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e2ec      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a06:	4b96      	ldr	r3, [pc, #600]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x2d4>
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d060      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x314>
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d119      	bne.n	8002a62 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d116      	bne.n	8002a62 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a34:	4b8a      	ldr	r3, [pc, #552]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x32c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e2c9      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a4c:	4b84      	ldr	r3, [pc, #528]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	4981      	ldr	r1, [pc, #516]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a60:	e040      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d023      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a6a:	4b7d      	ldr	r3, [pc, #500]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7c      	ldr	r2, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a76:	f7fe f861 	bl	8000b3c <HAL_GetTick>
 8002a7a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a7c:	e008      	b.n	8002a90 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7e:	f7fe f85d 	bl	8000b3c <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e2a7      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a90:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0f0      	beq.n	8002a7e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9c:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	496d      	ldr	r1, [pc, #436]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	604b      	str	r3, [r1, #4]
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab2:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6a      	ldr	r2, [pc, #424]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe f83d 	bl	8000b3c <HAL_GetTick>
 8002ac2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe f839 	bl	8000b3c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e283      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ad8:	4b61      	ldr	r3, [pc, #388]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f0      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d07f      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d05f      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002af8:	4b59      	ldr	r3, [pc, #356]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d037      	beq.n	8002b7e <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d006      	beq.n	8002b26 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e25c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01b      	beq.n	8002b68 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002b30:	4b4b      	ldr	r3, [pc, #300]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b36:	4a4a      	ldr	r2, [pc, #296]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002b38:	f023 0301 	bic.w	r3, r3, #1
 8002b3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b40:	f7fd fffc 	bl	8000b3c <HAL_GetTick>
 8002b44:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fd fff8 	bl	8000b3c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b11      	cmp	r3, #17
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e242      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b5a:	4b41      	ldr	r3, [pc, #260]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1ef      	bne.n	8002b48 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002b68:	4b3d      	ldr	r3, [pc, #244]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6e:	f023 0210 	bic.w	r2, r3, #16
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	493a      	ldr	r1, [pc, #232]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b84:	4a36      	ldr	r2, [pc, #216]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fd ffd5 	bl	8000b3c <HAL_GetTick>
 8002b92:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b96:	f7fd ffd1 	bl	8000b3c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b11      	cmp	r3, #17
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e21b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba8:	4b2d      	ldr	r3, [pc, #180]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0ef      	beq.n	8002b96 <HAL_RCC_OscConfig+0x476>
 8002bb6:	e01b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bbe:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002bc0:	f023 0301 	bic.w	r3, r3, #1
 8002bc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fd ffb8 	bl	8000b3c <HAL_GetTick>
 8002bcc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fd ffb4 	bl	8000b3c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b11      	cmp	r3, #17
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1fe      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1ef      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 80c1 	beq.w	8002d80 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10e      	bne.n	8002c2e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c10:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	4a12      	ldr	r2, [pc, #72]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1c:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_RCC_OscConfig+0x540>)
 8002c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCC_OscConfig+0x544>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_RCC_OscConfig+0x544>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_RCC_OscConfig+0x544>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fd ff79 	bl	8000b3c <HAL_GetTick>
 8002c4a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4c:	e00c      	b.n	8002c68 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4e:	f7fd ff75 	bl	8000b3c <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d905      	bls.n	8002c68 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e1bf      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c68:	4bb1      	ldr	r3, [pc, #708]	; (8002f30 <HAL_RCC_OscConfig+0x810>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d0ec      	beq.n	8002c4e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d02c      	beq.n	8002cda <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002c80:	4bac      	ldr	r3, [pc, #688]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	49a8      	ldr	r1, [pc, #672]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d010      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ca6:	4ba3      	ldr	r3, [pc, #652]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cac:	4aa1      	ldr	r2, [pc, #644]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002cae:	f043 0304 	orr.w	r3, r3, #4
 8002cb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cb6:	4b9f      	ldr	r3, [pc, #636]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cbc:	4a9d      	ldr	r2, [pc, #628]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc6:	e018      	b.n	8002cfa <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cc8:	4b9a      	ldr	r3, [pc, #616]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	4a99      	ldr	r2, [pc, #612]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cd8:	e00f      	b.n	8002cfa <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002cda:	4b96      	ldr	r3, [pc, #600]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	4a94      	ldr	r2, [pc, #592]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cea:	4b92      	ldr	r3, [pc, #584]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	4a90      	ldr	r2, [pc, #576]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002cf2:	f023 0304 	bic.w	r3, r3, #4
 8002cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fd ff1b 	bl	8000b3c <HAL_GetTick>
 8002d06:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fd ff17 	bl	8000b3c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e15f      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d20:	4b84      	ldr	r3, [pc, #528]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0ed      	beq.n	8002d0a <HAL_RCC_OscConfig+0x5ea>
 8002d2e:	e01d      	b.n	8002d6c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d30:	f7fd ff04 	bl	8000b3c <HAL_GetTick>
 8002d34:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fd ff00 	bl	8000b3c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e148      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d4e:	4b79      	ldr	r3, [pc, #484]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ed      	bne.n	8002d38 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002d5c:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a74      	ldr	r2, [pc, #464]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d78:	4a6e      	ldr	r2, [pc, #440]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002d7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d03c      	beq.n	8002e06 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01c      	beq.n	8002dce <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d94:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d9a:	4a66      	ldr	r2, [pc, #408]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fd feca 	bl	8000b3c <HAL_GetTick>
 8002da8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dac:	f7fd fec6 	bl	8000b3c <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e110      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ef      	beq.n	8002dac <HAL_RCC_OscConfig+0x68c>
 8002dcc:	e01b      	b.n	8002e06 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dce:	4b59      	ldr	r3, [pc, #356]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002dd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd4:	4a57      	ldr	r2, [pc, #348]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002dd6:	f023 0301 	bic.w	r3, r3, #1
 8002dda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dde:	f7fd fead 	bl	8000b3c <HAL_GetTick>
 8002de2:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002de6:	f7fd fea9 	bl	8000b3c <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e0f3      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002df8:	4b4e      	ldr	r3, [pc, #312]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ef      	bne.n	8002de6 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80e7 	beq.w	8002fde <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	f040 80b7 	bne.w	8002f88 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e1a:	4b46      	ldr	r3, [pc, #280]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0203 	and.w	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d124      	bne.n	8002e78 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d11b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d113      	bne.n	8002e78 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d109      	bne.n	8002e78 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	3b01      	subs	r3, #1
 8002e72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d061      	beq.n	8002f3c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d056      	beq.n	8002f2c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e7e:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a2c      	ldr	r2, [pc, #176]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e8a:	f7fd fe57 	bl	8000b3c <HAL_GetTick>
 8002e8e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fd fe53 	bl	8000b3c <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e09d      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1f0      	bne.n	8002e92 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <HAL_RCC_OscConfig+0x818>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0112      	lsls	r2, r2, #4
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eca:	0212      	lsls	r2, r2, #8
 8002ecc:	4311      	orrs	r1, r2
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ed2:	0852      	lsrs	r2, r2, #1
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	0552      	lsls	r2, r2, #21
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ede:	0852      	lsrs	r2, r2, #1
 8002ee0:	3a01      	subs	r2, #1
 8002ee2:	0652      	lsls	r2, r2, #25
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	4913      	ldr	r1, [pc, #76]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a10      	ldr	r2, [pc, #64]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f04:	f7fd fe1a 	bl	8000b3c <HAL_GetTick>
 8002f08:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7fd fe16 	bl	8000b3c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e060      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <HAL_RCC_OscConfig+0x814>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2a:	e058      	b.n	8002fde <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e057      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
 8002f30:	40007000 	.word	0x40007000
 8002f34:	40021000 	.word	0x40021000
 8002f38:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3c:	4b2a      	ldr	r3, [pc, #168]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d14a      	bne.n	8002fde <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a26      	ldr	r2, [pc, #152]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f54:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4a23      	ldr	r2, [pc, #140]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f5e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f60:	f7fd fdec 	bl	8000b3c <HAL_GetTick>
 8002f64:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f68:	f7fd fde8 	bl	8000b3c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e032      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f7a:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x848>
 8002f86:	e02a      	b.n	8002fde <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d025      	beq.n	8002fda <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f98:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002f9a:	4b13      	ldr	r3, [pc, #76]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002fa0:	f023 0303 	bic.w	r3, r3, #3
 8002fa4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002fac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002fb0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7fd fdc3 	bl	8000b3c <HAL_GetTick>
 8002fb6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fd fdbf 	bl	8000b3c <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e009      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_RCC_OscConfig+0x8c8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x89a>
 8002fd8:	e001      	b.n	8002fde <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3728      	adds	r7, #40	; 0x28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d101      	bne.n	8003000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0c8      	b.n	8003192 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003000:	4b66      	ldr	r3, [pc, #408]	; (800319c <HAL_RCC_ClockConfig+0x1b0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d910      	bls.n	8003030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b63      	ldr	r3, [pc, #396]	; (800319c <HAL_RCC_ClockConfig+0x1b0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4961      	ldr	r1, [pc, #388]	; (800319c <HAL_RCC_ClockConfig+0x1b0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b5f      	ldr	r3, [pc, #380]	; (800319c <HAL_RCC_ClockConfig+0x1b0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0b0      	b.n	8003192 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d04c      	beq.n	80030d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d107      	bne.n	8003054 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003044:	4b56      	ldr	r3, [pc, #344]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d121      	bne.n	8003094 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e09e      	b.n	8003192 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d107      	bne.n	800306c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305c:	4b50      	ldr	r3, [pc, #320]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d115      	bne.n	8003094 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e092      	b.n	8003192 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003074:	4b4a      	ldr	r3, [pc, #296]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d109      	bne.n	8003094 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e086      	b.n	8003192 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003084:	4b46      	ldr	r3, [pc, #280]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e07e      	b.n	8003192 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003094:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	f023 0203 	bic.w	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	493f      	ldr	r1, [pc, #252]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a6:	f7fd fd49 	bl	8000b3c <HAL_GetTick>
 80030aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fd fd45 	bl	8000b3c <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e066      	b.n	8003192 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c4:	4b36      	ldr	r3, [pc, #216]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 020c 	and.w	r2, r3, #12
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d1eb      	bne.n	80030ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e2:	4b2f      	ldr	r3, [pc, #188]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	492c      	ldr	r1, [pc, #176]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f4:	4b29      	ldr	r3, [pc, #164]	; (800319c <HAL_RCC_ClockConfig+0x1b0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d210      	bcs.n	8003124 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b26      	ldr	r3, [pc, #152]	; (800319c <HAL_RCC_ClockConfig+0x1b0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 0207 	bic.w	r2, r3, #7
 800310a:	4924      	ldr	r1, [pc, #144]	; (800319c <HAL_RCC_ClockConfig+0x1b0>)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003112:	4b22      	ldr	r3, [pc, #136]	; (800319c <HAL_RCC_ClockConfig+0x1b0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	429a      	cmp	r2, r3
 800311e:	d001      	beq.n	8003124 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e036      	b.n	8003192 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4918      	ldr	r1, [pc, #96]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	2b00      	cmp	r3, #0
 800314c:	d009      	beq.n	8003162 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314e:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4910      	ldr	r1, [pc, #64]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003162:	f000 f825 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8003166:	4601      	mov	r1, r0
 8003168:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <HAL_RCC_ClockConfig+0x1b4>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	5cd3      	ldrb	r3, [r2, r3]
 8003176:	f003 031f 	and.w	r3, r3, #31
 800317a:	fa21 f303 	lsr.w	r3, r1, r3
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_RCC_ClockConfig+0x1c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fc88 	bl	8000a9c <HAL_InitTick>
 800318c:	4603      	mov	r3, r0
 800318e:	72fb      	strb	r3, [r7, #11]

  return status;
 8003190:	7afb      	ldrb	r3, [r7, #11]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40022000 	.word	0x40022000
 80031a0:	40021000 	.word	0x40021000
 80031a4:	08003f5c 	.word	0x08003f5c
 80031a8:	20000000 	.word	0x20000000
 80031ac:	20000004 	.word	0x20000004

080031b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031c8:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x34>
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d121      	bne.n	8003222 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d11e      	bne.n	8003222 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	61fb      	str	r3, [r7, #28]
 80031fe:	e005      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003200:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	091b      	lsrs	r3, r3, #4
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800320c:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003214:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d102      	bne.n	800322e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003228:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e004      	b.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d101      	bne.n	8003238 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003234:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003236:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	d133      	bne.n	80032a6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800323e:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0303 	and.w	r3, r3, #3
 8003246:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d002      	beq.n	8003254 <HAL_RCC_GetSysClockFreq+0xa4>
 800324e:	2b03      	cmp	r3, #3
 8003250:	d003      	beq.n	800325a <HAL_RCC_GetSysClockFreq+0xaa>
 8003252:	e005      	b.n	8003260 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003254:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003256:	617b      	str	r3, [r7, #20]
      break;
 8003258:	e005      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800325c:	617b      	str	r3, [r7, #20]
      break;
 800325e:	e002      	b.n	8003266 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	617b      	str	r3, [r7, #20]
      break;
 8003264:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	3301      	adds	r3, #1
 8003272:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	0a1b      	lsrs	r3, r3, #8
 800327a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	fb02 f203 	mul.w	r2, r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_GetSysClockFreq+0x104>)
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	0e5b      	lsrs	r3, r3, #25
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	3301      	adds	r3, #1
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80032a6:	69bb      	ldr	r3, [r7, #24]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3724      	adds	r7, #36	; 0x24
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	40021000 	.word	0x40021000
 80032b8:	08003f74 	.word	0x08003f74
 80032bc:	00f42400 	.word	0x00f42400
 80032c0:	007a1200 	.word	0x007a1200

080032c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032c8:	4b03      	ldr	r3, [pc, #12]	; (80032d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ca:	681b      	ldr	r3, [r3, #0]
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20000000 	.word	0x20000000

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032e0:	f7ff fff0 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 80032e4:	4601      	mov	r1, r0
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f2:	5cd3      	ldrb	r3, [r2, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000
 8003304:	08003f6c 	.word	0x08003f6c

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800330c:	f7ff ffda 	bl	80032c4 <HAL_RCC_GetHCLKFreq>
 8003310:	4601      	mov	r1, r0
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	0adb      	lsrs	r3, r3, #11
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	08003f6c 	.word	0x08003f6c

08003334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800334c:	f7ff f984 	bl	8002658 <HAL_PWREx_GetVoltageRange>
 8003350:	6178      	str	r0, [r7, #20]
 8003352:	e014      	b.n	800337e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003354:	4b25      	ldr	r3, [pc, #148]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	4a24      	ldr	r2, [pc, #144]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335e:	6593      	str	r3, [r2, #88]	; 0x58
 8003360:	4b22      	ldr	r3, [pc, #136]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800336c:	f7ff f974 	bl	8002658 <HAL_PWREx_GetVoltageRange>
 8003370:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003372:	4b1e      	ldr	r3, [pc, #120]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800337c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003384:	d10b      	bne.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d919      	bls.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2ba0      	cmp	r3, #160	; 0xa0
 8003390:	d902      	bls.n	8003398 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003392:	2302      	movs	r3, #2
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	e013      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003398:	2301      	movs	r3, #1
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	e010      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d902      	bls.n	80033aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80033a4:	2303      	movs	r3, #3
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	e00a      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b80      	cmp	r3, #128	; 0x80
 80033ae:	d102      	bne.n	80033b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80033b0:	2302      	movs	r3, #2
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	e004      	b.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b70      	cmp	r3, #112	; 0x70
 80033ba:	d101      	bne.n	80033c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033bc:	2301      	movs	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033c0:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f023 0207 	bic.w	r2, r3, #7
 80033c8:	4909      	ldr	r1, [pc, #36]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0307 	and.w	r3, r3, #7
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d001      	beq.n	80033e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40022000 	.word	0x40022000

080033f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033fc:	2300      	movs	r3, #0
 80033fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003400:	2300      	movs	r3, #0
 8003402:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 809e 	beq.w	800354e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003412:	2300      	movs	r3, #0
 8003414:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003416:	4b46      	ldr	r3, [pc, #280]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342c:	4b40      	ldr	r3, [pc, #256]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	4a3f      	ldr	r2, [pc, #252]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003436:	6593      	str	r3, [r2, #88]	; 0x58
 8003438:	4b3d      	ldr	r3, [pc, #244]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800343a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003444:	2301      	movs	r3, #1
 8003446:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003448:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a39      	ldr	r2, [pc, #228]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800344e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003452:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003454:	f7fd fb72 	bl	8000b3c <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800345a:	e009      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800345c:	f7fd fb6e 	bl	8000b3c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d902      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	74fb      	strb	r3, [r7, #19]
        break;
 800346e:	e005      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003470:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0ef      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d15a      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003482:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003484:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01e      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	429a      	cmp	r2, r3
 800349c:	d019      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034aa:	4b21      	ldr	r3, [pc, #132]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ba:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034ca:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d016      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fd fb2e 	bl	8000b3c <HAL_GetTick>
 80034e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e2:	e00b      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fd fb2a 	bl	8000b3c <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d902      	bls.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	74fb      	strb	r3, [r7, #19]
            break;
 80034fa:	e006      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ec      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10b      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4904      	ldr	r1, [pc, #16]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003526:	e009      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353c:	7c7b      	ldrb	r3, [r7, #17]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003542:	4b6e      	ldr	r3, [pc, #440]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	4a6d      	ldr	r2, [pc, #436]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355a:	4b68      	ldr	r3, [pc, #416]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f023 0203 	bic.w	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4964      	ldr	r1, [pc, #400]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800357c:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	f023 020c 	bic.w	r2, r3, #12
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	495c      	ldr	r1, [pc, #368]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800359e:	4b57      	ldr	r3, [pc, #348]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4953      	ldr	r1, [pc, #332]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035c0:	4b4e      	ldr	r3, [pc, #312]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	494b      	ldr	r1, [pc, #300]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035e2:	4b46      	ldr	r3, [pc, #280]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	4942      	ldr	r1, [pc, #264]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800360a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	493a      	ldr	r1, [pc, #232]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003626:	4b35      	ldr	r3, [pc, #212]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	4931      	ldr	r1, [pc, #196]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003648:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	4929      	ldr	r1, [pc, #164]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4920      	ldr	r1, [pc, #128]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d015      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	4918      	ldr	r1, [pc, #96]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036aa:	d105      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4a12      	ldr	r2, [pc, #72]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d015      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036c4:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	490a      	ldr	r1, [pc, #40]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e2:	d105      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4a04      	ldr	r2, [pc, #16]	; (80036fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000

08003700 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800370a:	f043 0304 	orr.w	r3, r3, #4
 800370e:	6013      	str	r3, [r2, #0]
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e040      	b.n	80037b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd f8a0 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	; 0x24
 800374c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f82c 	bl	80037bc <UART_SetConfig>
 8003764:	4603      	mov	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e022      	b.n	80037b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 fa56 	bl	8003c28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fadd 	bl	8003d6c <UART_CheckIdleState>
 80037b2:	4603      	mov	r3, r0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037bc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80037c0:	b088      	sub	sp, #32
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c6:	2300      	movs	r3, #0
 80037c8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689a      	ldr	r2, [r3, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4313      	orrs	r3, r2
 80037e0:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4baa      	ldr	r3, [pc, #680]	; (8003a94 <UART_SetConfig+0x2d8>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	430b      	orrs	r3, r1
 80037f4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4aa0      	ldr	r2, [pc, #640]	; (8003a98 <UART_SetConfig+0x2dc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	4313      	orrs	r3, r2
 8003824:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a97      	ldr	r2, [pc, #604]	; (8003a9c <UART_SetConfig+0x2e0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d121      	bne.n	8003888 <UART_SetConfig+0xcc>
 8003844:	4b96      	ldr	r3, [pc, #600]	; (8003aa0 <UART_SetConfig+0x2e4>)
 8003846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b03      	cmp	r3, #3
 8003850:	d816      	bhi.n	8003880 <UART_SetConfig+0xc4>
 8003852:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0x9c>)
 8003854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003858:	08003869 	.word	0x08003869
 800385c:	08003875 	.word	0x08003875
 8003860:	0800386f 	.word	0x0800386f
 8003864:	0800387b 	.word	0x0800387b
 8003868:	2301      	movs	r3, #1
 800386a:	76fb      	strb	r3, [r7, #27]
 800386c:	e098      	b.n	80039a0 <UART_SetConfig+0x1e4>
 800386e:	2302      	movs	r3, #2
 8003870:	76fb      	strb	r3, [r7, #27]
 8003872:	e095      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003874:	2304      	movs	r3, #4
 8003876:	76fb      	strb	r3, [r7, #27]
 8003878:	e092      	b.n	80039a0 <UART_SetConfig+0x1e4>
 800387a:	2308      	movs	r3, #8
 800387c:	76fb      	strb	r3, [r7, #27]
 800387e:	e08f      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003880:	2310      	movs	r3, #16
 8003882:	76fb      	strb	r3, [r7, #27]
 8003884:	bf00      	nop
 8003886:	e08b      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a85      	ldr	r2, [pc, #532]	; (8003aa4 <UART_SetConfig+0x2e8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d134      	bne.n	80038fc <UART_SetConfig+0x140>
 8003892:	4b83      	ldr	r3, [pc, #524]	; (8003aa0 <UART_SetConfig+0x2e4>)
 8003894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b0c      	cmp	r3, #12
 800389e:	d829      	bhi.n	80038f4 <UART_SetConfig+0x138>
 80038a0:	a201      	add	r2, pc, #4	; (adr r2, 80038a8 <UART_SetConfig+0xec>)
 80038a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a6:	bf00      	nop
 80038a8:	080038dd 	.word	0x080038dd
 80038ac:	080038f5 	.word	0x080038f5
 80038b0:	080038f5 	.word	0x080038f5
 80038b4:	080038f5 	.word	0x080038f5
 80038b8:	080038e9 	.word	0x080038e9
 80038bc:	080038f5 	.word	0x080038f5
 80038c0:	080038f5 	.word	0x080038f5
 80038c4:	080038f5 	.word	0x080038f5
 80038c8:	080038e3 	.word	0x080038e3
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	080038f5 	.word	0x080038f5
 80038d4:	080038f5 	.word	0x080038f5
 80038d8:	080038ef 	.word	0x080038ef
 80038dc:	2300      	movs	r3, #0
 80038de:	76fb      	strb	r3, [r7, #27]
 80038e0:	e05e      	b.n	80039a0 <UART_SetConfig+0x1e4>
 80038e2:	2302      	movs	r3, #2
 80038e4:	76fb      	strb	r3, [r7, #27]
 80038e6:	e05b      	b.n	80039a0 <UART_SetConfig+0x1e4>
 80038e8:	2304      	movs	r3, #4
 80038ea:	76fb      	strb	r3, [r7, #27]
 80038ec:	e058      	b.n	80039a0 <UART_SetConfig+0x1e4>
 80038ee:	2308      	movs	r3, #8
 80038f0:	76fb      	strb	r3, [r7, #27]
 80038f2:	e055      	b.n	80039a0 <UART_SetConfig+0x1e4>
 80038f4:	2310      	movs	r3, #16
 80038f6:	76fb      	strb	r3, [r7, #27]
 80038f8:	bf00      	nop
 80038fa:	e051      	b.n	80039a0 <UART_SetConfig+0x1e4>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a69      	ldr	r2, [pc, #420]	; (8003aa8 <UART_SetConfig+0x2ec>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d120      	bne.n	8003948 <UART_SetConfig+0x18c>
 8003906:	4b66      	ldr	r3, [pc, #408]	; (8003aa0 <UART_SetConfig+0x2e4>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003910:	2b10      	cmp	r3, #16
 8003912:	d00f      	beq.n	8003934 <UART_SetConfig+0x178>
 8003914:	2b10      	cmp	r3, #16
 8003916:	d802      	bhi.n	800391e <UART_SetConfig+0x162>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <UART_SetConfig+0x16c>
 800391c:	e010      	b.n	8003940 <UART_SetConfig+0x184>
 800391e:	2b20      	cmp	r3, #32
 8003920:	d005      	beq.n	800392e <UART_SetConfig+0x172>
 8003922:	2b30      	cmp	r3, #48	; 0x30
 8003924:	d009      	beq.n	800393a <UART_SetConfig+0x17e>
 8003926:	e00b      	b.n	8003940 <UART_SetConfig+0x184>
 8003928:	2300      	movs	r3, #0
 800392a:	76fb      	strb	r3, [r7, #27]
 800392c:	e038      	b.n	80039a0 <UART_SetConfig+0x1e4>
 800392e:	2302      	movs	r3, #2
 8003930:	76fb      	strb	r3, [r7, #27]
 8003932:	e035      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003934:	2304      	movs	r3, #4
 8003936:	76fb      	strb	r3, [r7, #27]
 8003938:	e032      	b.n	80039a0 <UART_SetConfig+0x1e4>
 800393a:	2308      	movs	r3, #8
 800393c:	76fb      	strb	r3, [r7, #27]
 800393e:	e02f      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003940:	2310      	movs	r3, #16
 8003942:	76fb      	strb	r3, [r7, #27]
 8003944:	bf00      	nop
 8003946:	e02b      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a52      	ldr	r2, [pc, #328]	; (8003a98 <UART_SetConfig+0x2dc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d124      	bne.n	800399c <UART_SetConfig+0x1e0>
 8003952:	4b53      	ldr	r3, [pc, #332]	; (8003aa0 <UART_SetConfig+0x2e4>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003960:	d012      	beq.n	8003988 <UART_SetConfig+0x1cc>
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003966:	d802      	bhi.n	800396e <UART_SetConfig+0x1b2>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d007      	beq.n	800397c <UART_SetConfig+0x1c0>
 800396c:	e012      	b.n	8003994 <UART_SetConfig+0x1d8>
 800396e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003972:	d006      	beq.n	8003982 <UART_SetConfig+0x1c6>
 8003974:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003978:	d009      	beq.n	800398e <UART_SetConfig+0x1d2>
 800397a:	e00b      	b.n	8003994 <UART_SetConfig+0x1d8>
 800397c:	2300      	movs	r3, #0
 800397e:	76fb      	strb	r3, [r7, #27]
 8003980:	e00e      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003982:	2302      	movs	r3, #2
 8003984:	76fb      	strb	r3, [r7, #27]
 8003986:	e00b      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003988:	2304      	movs	r3, #4
 800398a:	76fb      	strb	r3, [r7, #27]
 800398c:	e008      	b.n	80039a0 <UART_SetConfig+0x1e4>
 800398e:	2308      	movs	r3, #8
 8003990:	76fb      	strb	r3, [r7, #27]
 8003992:	e005      	b.n	80039a0 <UART_SetConfig+0x1e4>
 8003994:	2310      	movs	r3, #16
 8003996:	76fb      	strb	r3, [r7, #27]
 8003998:	bf00      	nop
 800399a:	e001      	b.n	80039a0 <UART_SetConfig+0x1e4>
 800399c:	2310      	movs	r3, #16
 800399e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3c      	ldr	r2, [pc, #240]	; (8003a98 <UART_SetConfig+0x2dc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	f040 8082 	bne.w	8003ab0 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039ac:	7efb      	ldrb	r3, [r7, #27]
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d823      	bhi.n	80039fa <UART_SetConfig+0x23e>
 80039b2:	a201      	add	r2, pc, #4	; (adr r2, 80039b8 <UART_SetConfig+0x1fc>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039dd 	.word	0x080039dd
 80039bc:	080039fb 	.word	0x080039fb
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	080039fb 	.word	0x080039fb
 80039c8:	080039eb 	.word	0x080039eb
 80039cc:	080039fb 	.word	0x080039fb
 80039d0:	080039fb 	.word	0x080039fb
 80039d4:	080039fb 	.word	0x080039fb
 80039d8:	080039f3 	.word	0x080039f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7ff fc7e 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 80039e0:	6178      	str	r0, [r7, #20]
        break;
 80039e2:	e00f      	b.n	8003a04 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e4:	4b31      	ldr	r3, [pc, #196]	; (8003aac <UART_SetConfig+0x2f0>)
 80039e6:	617b      	str	r3, [r7, #20]
        break;
 80039e8:	e00c      	b.n	8003a04 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ea:	f7ff fbe1 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 80039ee:	6178      	str	r0, [r7, #20]
        break;
 80039f0:	e008      	b.n	8003a04 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039f6:	617b      	str	r3, [r7, #20]
        break;
 80039f8:	e004      	b.n	8003a04 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	76bb      	strb	r3, [r7, #26]
        break;
 8003a02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8100 	beq.w	8003c0c <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d305      	bcc.n	8003a28 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d902      	bls.n	8003a2e <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	76bb      	strb	r3, [r7, #26]
 8003a2c:	e0ee      	b.n	8003c0c <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	4619      	mov	r1, r3
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	f04f 0400 	mov.w	r4, #0
 8003a3e:	0214      	lsls	r4, r2, #8
 8003a40:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a44:	020b      	lsls	r3, r1, #8
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6852      	ldr	r2, [r2, #4]
 8003a4a:	0852      	lsrs	r2, r2, #1
 8003a4c:	4611      	mov	r1, r2
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	eb13 0b01 	adds.w	fp, r3, r1
 8003a56:	eb44 0c02 	adc.w	ip, r4, r2
 8003a5a:	4658      	mov	r0, fp
 8003a5c:	4661      	mov	r1, ip
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f04f 0400 	mov.w	r4, #0
 8003a66:	461a      	mov	r2, r3
 8003a68:	4623      	mov	r3, r4
 8003a6a:	f7fc fbaf 	bl	80001cc <__aeabi_uldivmod>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	460c      	mov	r4, r1
 8003a72:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a7a:	d308      	bcc.n	8003a8e <UART_SetConfig+0x2d2>
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a82:	d204      	bcs.n	8003a8e <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	60da      	str	r2, [r3, #12]
 8003a8c:	e0be      	b.n	8003c0c <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	76bb      	strb	r3, [r7, #26]
 8003a92:	e0bb      	b.n	8003c0c <UART_SetConfig+0x450>
 8003a94:	efff69f3 	.word	0xefff69f3
 8003a98:	40008000 	.word	0x40008000
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40004400 	.word	0x40004400
 8003aa8:	40004800 	.word	0x40004800
 8003aac:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab8:	d15c      	bne.n	8003b74 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8003aba:	7efb      	ldrb	r3, [r7, #27]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d828      	bhi.n	8003b12 <UART_SetConfig+0x356>
 8003ac0:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <UART_SetConfig+0x30c>)
 8003ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac6:	bf00      	nop
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003afd 	.word	0x08003afd
 8003ad4:	08003b13 	.word	0x08003b13
 8003ad8:	08003b03 	.word	0x08003b03
 8003adc:	08003b13 	.word	0x08003b13
 8003ae0:	08003b13 	.word	0x08003b13
 8003ae4:	08003b13 	.word	0x08003b13
 8003ae8:	08003b0b 	.word	0x08003b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7ff fbf6 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8003af0:	6178      	str	r0, [r7, #20]
        break;
 8003af2:	e013      	b.n	8003b1c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7ff fc08 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8003af8:	6178      	str	r0, [r7, #20]
        break;
 8003afa:	e00f      	b.n	8003b1c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003afc:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <UART_SetConfig+0x468>)
 8003afe:	617b      	str	r3, [r7, #20]
        break;
 8003b00:	e00c      	b.n	8003b1c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b02:	f7ff fb55 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8003b06:	6178      	str	r0, [r7, #20]
        break;
 8003b08:	e008      	b.n	8003b1c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0e:	617b      	str	r3, [r7, #20]
        break;
 8003b10:	e004      	b.n	8003b1c <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	76bb      	strb	r3, [r7, #26]
        break;
 8003b1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d074      	beq.n	8003c0c <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	005a      	lsls	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	085b      	lsrs	r3, r3, #1
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d916      	bls.n	8003b6e <UART_SetConfig+0x3b2>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b46:	d212      	bcs.n	8003b6e <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	f023 030f 	bic.w	r3, r3, #15
 8003b50:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	085b      	lsrs	r3, r3, #1
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	89fb      	ldrh	r3, [r7, #14]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	89fa      	ldrh	r2, [r7, #14]
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	e04e      	b.n	8003c0c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	76bb      	strb	r3, [r7, #26]
 8003b72:	e04b      	b.n	8003c0c <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b74:	7efb      	ldrb	r3, [r7, #27]
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d827      	bhi.n	8003bca <UART_SetConfig+0x40e>
 8003b7a:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <UART_SetConfig+0x3c4>)
 8003b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003bad 	.word	0x08003bad
 8003b88:	08003bb5 	.word	0x08003bb5
 8003b8c:	08003bcb 	.word	0x08003bcb
 8003b90:	08003bbb 	.word	0x08003bbb
 8003b94:	08003bcb 	.word	0x08003bcb
 8003b98:	08003bcb 	.word	0x08003bcb
 8003b9c:	08003bcb 	.word	0x08003bcb
 8003ba0:	08003bc3 	.word	0x08003bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f7ff fb9a 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8003ba8:	6178      	str	r0, [r7, #20]
        break;
 8003baa:	e013      	b.n	8003bd4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bac:	f7ff fbac 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 8003bb0:	6178      	str	r0, [r7, #20]
        break;
 8003bb2:	e00f      	b.n	8003bd4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <UART_SetConfig+0x468>)
 8003bb6:	617b      	str	r3, [r7, #20]
        break;
 8003bb8:	e00c      	b.n	8003bd4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bba:	f7ff faf9 	bl	80031b0 <HAL_RCC_GetSysClockFreq>
 8003bbe:	6178      	str	r0, [r7, #20]
        break;
 8003bc0:	e008      	b.n	8003bd4 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc6:	617b      	str	r3, [r7, #20]
        break;
 8003bc8:	e004      	b.n	8003bd4 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	76bb      	strb	r3, [r7, #26]
        break;
 8003bd2:	bf00      	nop
    }

    if (pclk != 0U)
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d018      	beq.n	8003c0c <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	085a      	lsrs	r2, r3, #1
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	441a      	add	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	2b0f      	cmp	r3, #15
 8003bf4:	d908      	bls.n	8003c08 <UART_SetConfig+0x44c>
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bfc:	d204      	bcs.n	8003c08 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	60da      	str	r2, [r3, #12]
 8003c06:	e001      	b.n	8003c0c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c18:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003c24:	00f42400 	.word	0x00f42400

08003c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d26:	d10a      	bne.n	8003d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d7a:	f7fc fedf 	bl	8000b3c <HAL_GetTick>
 8003d7e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d10e      	bne.n	8003dac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d8e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f82a 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e020      	b.n	8003dee <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d10e      	bne.n	8003dd8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f814 	bl	8003df6 <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e00a      	b.n	8003dee <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4613      	mov	r3, r2
 8003e04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e06:	e05d      	b.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e0e:	d059      	beq.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e10:	f7fc fe94 	bl	8000b3c <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d302      	bcc.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11b      	bne.n	8003e5e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0201 	bic.w	r2, r2, #1
 8003e44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e042      	b.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d02b      	beq.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e7a:	d123      	bne.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0201 	bic.w	r2, r2, #1
 8003ea4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e00f      	b.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	69da      	ldr	r2, [r3, #28]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d092      	beq.n	8003e08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <__libc_init_array>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4e0d      	ldr	r6, [pc, #52]	; (8003f24 <__libc_init_array+0x38>)
 8003ef0:	4c0d      	ldr	r4, [pc, #52]	; (8003f28 <__libc_init_array+0x3c>)
 8003ef2:	1ba4      	subs	r4, r4, r6
 8003ef4:	10a4      	asrs	r4, r4, #2
 8003ef6:	2500      	movs	r5, #0
 8003ef8:	42a5      	cmp	r5, r4
 8003efa:	d109      	bne.n	8003f10 <__libc_init_array+0x24>
 8003efc:	4e0b      	ldr	r6, [pc, #44]	; (8003f2c <__libc_init_array+0x40>)
 8003efe:	4c0c      	ldr	r4, [pc, #48]	; (8003f30 <__libc_init_array+0x44>)
 8003f00:	f000 f820 	bl	8003f44 <_init>
 8003f04:	1ba4      	subs	r4, r4, r6
 8003f06:	10a4      	asrs	r4, r4, #2
 8003f08:	2500      	movs	r5, #0
 8003f0a:	42a5      	cmp	r5, r4
 8003f0c:	d105      	bne.n	8003f1a <__libc_init_array+0x2e>
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f14:	4798      	blx	r3
 8003f16:	3501      	adds	r5, #1
 8003f18:	e7ee      	b.n	8003ef8 <__libc_init_array+0xc>
 8003f1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f1e:	4798      	blx	r3
 8003f20:	3501      	adds	r5, #1
 8003f22:	e7f2      	b.n	8003f0a <__libc_init_array+0x1e>
 8003f24:	08003fac 	.word	0x08003fac
 8003f28:	08003fac 	.word	0x08003fac
 8003f2c:	08003fac 	.word	0x08003fac
 8003f30:	08003fb0 	.word	0x08003fb0

08003f34 <memset>:
 8003f34:	4402      	add	r2, r0
 8003f36:	4603      	mov	r3, r0
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d100      	bne.n	8003f3e <memset+0xa>
 8003f3c:	4770      	bx	lr
 8003f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f42:	e7f9      	b.n	8003f38 <memset+0x4>

08003f44 <_init>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr

08003f50 <_fini>:
 8003f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f52:	bf00      	nop
 8003f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f56:	bc08      	pop	{r3}
 8003f58:	469e      	mov	lr, r3
 8003f5a:	4770      	bx	lr
